import Foundation
import Alamofire
import StoreKit

// Response models remain the same
struct KeyValidationResponse: Codable {
    let appId: String
    let trackRetention: Bool?
    
    enum CodingKeys: String, CodingKey {
        case appId = "app_id"
        case trackRetention = "track_retention"
    }
}

public struct ValidationResponse: Codable {
    public let programId: String?
    public let codeId: String?
    public let isFree: Bool?
    public let placementId: String?
    public let brandCodeData: BrandCodeData?
    
    enum CodingKeys: String, CodingKey {
        case programId = "campaign_id"
        case codeId = "affiliate_code_id"
        case isFree = "is_free"
        case placementId = "placement_id"
        case brandCodeData = "brand_code_data"
    }
}

public struct BrandCodeData: Codable {
    public let codeId: String
    
    enum CodingKeys: String, CodingKey {
        case codeId = "code_id"
    }
}

struct ConversionUser: Codable {
    let externalUserId: String
    let name: String?
    let email: String?
    let phone: String?
    let autoGeneratedExternalUserId: String?
    
    enum CodingKeys: String, CodingKey {
        case externalUserId = "external_user_id"
        case name
        case email
        case phone
        case autoGeneratedExternalUserId = "auto_generated_external_user_id"
    }
}

struct TrackingSessionData: Codable {
    let sessionId: String
    let userAgent: String
    let deviceModel: String
    let osVersion: String
    let screenResolution: String
    let timezone: String
    let language: String?

    enum CodingKeys: String, CodingKey {
        case sessionId = "session_id"
        case userAgent = "user_agent"
        case deviceModel = "device_model"
        case osVersion = "os_version"
        case screenResolution = "screen_resolution"
        case timezone
        case language
    }
}

struct UserRegistrationRequest: Codable {
    let code: String
    let platform: String
    let conversionUser: ConversionUser
    let codeId: String?
    
    enum CodingKeys: String, CodingKey {
        case code
        case platform
        case conversionUser = "conversion_user"
        case codeId = "affiliate_code_id"
    }
}

public actor ShinaraSDK {
    public static let instance = ShinaraSDK()
    private var apiKey: String?
    private var baseURL: String = "https://sdk-gateway-b85kv8d1.ue.gateway.dev"
    
    private let sdkSetupCompletedKey = "SHINARA_SDK_SETUP_COMPLETED"
    private let referralCodeKey = "SHINARA_SDK_REFERRAL_CODE"
    private let programIdKey = "SHINARA_SDK_PROGRAM_ID"
    private let referralCodeIdKey = "SHINARA_SDK_REFERRAL_CODE_ID"
    
    private let referralCodeIsFreeKey = "SHINARA_SDK_REFERRAL_CODE_IS_FREE"
    private let referralCodePlacementIdKey = "SHINARA_SDK_REFERRAL_CODE_PLACEMENT_ID"
    
    // brand code keys
    private let referralBrandCodeIdKey = "SHINARA_SDK_REFERRAL_BRAND_CODE_ID"
    
    private let userExternalIdKey = "SHINARA_SDK_EXTERNAL_USER_ID"
    private let autoGenUserExternalIdKey = "SHINARA_SDK_AUTO_GEN_EXTERNAL_USER_ID"
    private let processedTransactionsKey = "SHINARA_SDK_PROCESSED_TRANSACTIONS"
    private let registeredUsersKey = "SHINARA_SDK_REGISTERED_USERS"
    private let apiHeaderKey = "X-API-Key"
    private let sdkPlatformHeaderKey = "X-SDK-Platform"
    private let sdkPlatformHeaderValue = "ios"
    
    private let referralParamKey = "shinara_ref_code"
    
    private init() {}
    
    public func initialize(apiKey: String) async throws {
        self.apiKey = apiKey
        try await validateAPIKey()
        triggerSetup()
        print("Shinara SDK Initialized")
    }
    
    private func validateAPIKey() async throws -> KeyValidationResponse {
        guard let apiKey = apiKey else {
            throw NSError(domain: "ShinaraSDK", code: 400, userInfo: [NSLocalizedDescriptionKey: "API Key is not set"])
        }

        let headers: HTTPHeaders = [self.apiHeaderKey: apiKey, self.sdkPlatformHeaderKey: sdkPlatformHeaderValue]
        let response = await AF.request("\(baseURL)/api/key/validate", headers: headers).serializingData().response

        guard let statusCode = response.response?.statusCode else {
            throw NSError(domain: "ShinaraSDK", code: -1, userInfo: [NSLocalizedDescriptionKey: "Unknown error occurred"])
        }

        if statusCode == 200, let data = response.data {
            let validationResponse = try JSONDecoder().decode(KeyValidationResponse.self, from: data)
            return validationResponse // Success!
        } else {
            throw NSError(domain: "ShinaraSDK", code: statusCode, userInfo: [NSLocalizedDescriptionKey: "API Key validation failed"])
        }
    }
    
    public func validateReferralCode(code: String) async throws -> ValidationResponse {
        guard let apiKey = apiKey else {
            throw NSError(domain: "ShinaraSDK", code: 400, userInfo: [NSLocalizedDescriptionKey: "API Key is not set"])
        }

        var parameters = ["code": code]
        if let autoGenExternalUserId = UserDefaults.standard.string(forKey: self.autoGenUserExternalIdKey) {
            parameters["auto_generated_external_user_id"] = autoGenExternalUserId
        }
        let headers: HTTPHeaders = [self.apiHeaderKey: apiKey, self.sdkPlatformHeaderKey: sdkPlatformHeaderValue]

        let response = await AF.request(
            "\(self.baseURL)/api/code/validate",
            method: .post,
            parameters: parameters,
            encoder: JSONParameterEncoder.default,
            headers: headers
        ).serializingData().response

        guard let statusCode = response.response?.statusCode else {
            throw NSError(domain: "ShinaraSDK", code: -1, userInfo: [NSLocalizedDescriptionKey: "Unknown error occurred"])
        }

        if statusCode == 200, let data = response.data {
            let validationResponse = try JSONDecoder().decode(ValidationResponse.self, from: data)

            if let brandCodeData = validationResponse.brandCodeData {
                // Store brand code data
                UserDefaults.standard.set(brandCodeData.codeId, forKey: self.referralBrandCodeIdKey)
                
                if let isFree = validationResponse.isFree {
                    UserDefaults.standard.set(isFree, forKey: self.referralCodeIsFreeKey)
                } else {
                    UserDefaults.standard.removeObject(forKey: self.referralCodeIsFreeKey)
                }
                if let placementId = validationResponse.placementId {
                    UserDefaults.standard.set(placementId, forKey: self.referralCodePlacementIdKey)
                } else {
                    UserDefaults.standard.removeObject(forKey: self.referralCodePlacementIdKey)
                }
                // Clear affiliate code data
                UserDefaults.standard.removeObject(forKey: self.referralCodeKey)
                UserDefaults.standard.removeObject(forKey: self.programIdKey)
                UserDefaults.standard.removeObject(forKey: self.referralCodeIdKey)
                
                return validationResponse
            }
            
            if let programId = validationResponse.programId, !programId.isEmpty {
                // Store affiliate code data
                UserDefaults.standard.set(code, forKey: self.referralCodeKey)
                UserDefaults.standard.set(programId, forKey: self.programIdKey)
                if let codeId = validationResponse.codeId, !codeId.isEmpty {
                    UserDefaults.standard.set(codeId, forKey: self.referralCodeIdKey)
                }
                if let isFree = validationResponse.isFree {
                    UserDefaults.standard.set(isFree, forKey: self.referralCodeIsFreeKey)
                } else {
                    UserDefaults.standard.removeObject(forKey: self.referralCodeIsFreeKey)
                }
                if let placementId = validationResponse.placementId {
                    UserDefaults.standard.set(placementId, forKey: self.referralCodePlacementIdKey)
                } else {
                    UserDefaults.standard.removeObject(forKey: self.referralCodePlacementIdKey)
                }
                // Clear brand code data
                UserDefaults.standard.removeObject(forKey: self.referralBrandCodeIdKey)
                return validationResponse
            } else {
                throw NSError(domain: "ShinaraSDK", code: statusCode, userInfo: [NSLocalizedDescriptionKey: "Referral code validation failed"])
            }
        } else {
            throw NSError(domain: "ShinaraSDK", code: statusCode, userInfo: [NSLocalizedDescriptionKey: "Referral code validation failed"])
        }
    }

    private func triggerSetup() {
        Task {
            guard let apiKey = apiKey else {
                return
            }

            if UserDefaults.standard.string(forKey: self.sdkSetupCompletedKey) != nil {
                return
            }

            let cachedAutoGeneratedExternalUserId = UserDefaults.standard.string(forKey: self.autoGenUserExternalIdKey)
            let autoSDKGenExternalUserId: String
            if cachedAutoGeneratedExternalUserId != nil {
                autoSDKGenExternalUserId = cachedAutoGeneratedExternalUserId!
            } else {
                autoSDKGenExternalUserId = UUID().uuidString
                UserDefaults.standard.set(autoSDKGenExternalUserId, forKey: self.autoGenUserExternalIdKey)
            }

            let headers: HTTPHeaders = [self.apiHeaderKey: apiKey, self.sdkPlatformHeaderKey: sdkPlatformHeaderValue]
            let request = await getTrackingSessionData(sessionId: autoSDKGenExternalUserId)

            _ = await AF.request(
                "\(self.baseURL)/sdknewtrackingsession",
                method: .post,
                parameters: request,
                encoder: JSONParameterEncoder.default,
                headers: headers
            ).serializingData().response

            UserDefaults.standard.set(true, forKey: self.sdkSetupCompletedKey)
        }
    }
    
    public func getReferralCode() -> String? {
        UserDefaults.standard.string(forKey: referralCodeKey)
    }
    
    public func getProgramId() -> String? {
        UserDefaults.standard.string(forKey: programIdKey)
    }

    public func getBrandCodeId() -> String? {
        UserDefaults.standard.string(forKey: referralBrandCodeIdKey)
    }
    
    public func getIsFree() -> Bool {
        UserDefaults.standard.bool(forKey: referralCodeIsFreeKey)
    }
    
    public func getPlacementId() -> String? {
        UserDefaults.standard.string(forKey: referralCodePlacementIdKey)
    }
    
    public func registerUser(userId: String, email: String?, name: String?, phone: String?) async throws {
        guard let apiKey = apiKey else {
            throw NSError(domain: "ShinaraSDK", code: 400, userInfo: [NSLocalizedDescriptionKey: "API Key is not set"])
        }

        guard let referralCode = UserDefaults.standard.string(forKey: self.referralCodeKey) else {
            throw NSError(domain: "ShinaraSDK", code: 400, userInfo: [NSLocalizedDescriptionKey: "No stored referral code found. Please save a referral code before registering a user."])
        }
        
        var registeredUsers = UserDefaults.standard.array(forKey: self.registeredUsersKey) as? [String] ?? []
        if registeredUsers.contains(userId) {
            return // Skip if already registered
        }

        let headers: HTTPHeaders = [self.apiHeaderKey: apiKey, self.sdkPlatformHeaderKey: sdkPlatformHeaderValue]
        let conversionUser = ConversionUser(
            externalUserId: userId,
            name: name,
            email: email,
            phone: phone,
            autoGeneratedExternalUserId: UserDefaults.standard.string(forKey: self.autoGenUserExternalIdKey)
        )
        
        let codeId = UserDefaults.standard.string(forKey: self.referralCodeIdKey)

        let request = UserRegistrationRequest(
            code: referralCode,
            platform: "",
            conversionUser: conversionUser,
            codeId: codeId
        )

        let response = await AF.request(
            "\(self.baseURL)/newuser",
            method: .post,
            parameters: request,
            encoder: JSONParameterEncoder.default,
            headers: headers
        ).serializingData().response

        guard let statusCode = response.response?.statusCode else {
            throw NSError(domain: "ShinaraSDK", code: -1, userInfo: [NSLocalizedDescriptionKey: "Unknown error occurred"])
        }

        if statusCode == 200 {
            UserDefaults.standard.set(userId, forKey: self.userExternalIdKey)
            registeredUsers.append(userId)
            UserDefaults.standard.set(registeredUsers, forKey: self.registeredUsersKey)
        } else {
            throw NSError(domain: "ShinaraSDK", code: statusCode, userInfo: [NSLocalizedDescriptionKey: "User registration failed"])
        }
    }
    
    public func getUserId() -> String? {
        UserDefaults.standard.string(forKey: userExternalIdKey)
    }
    
    public func attributePurchase(productId: String, transactionId: String) async throws {
        guard let apiKey = apiKey else {
            throw NSError(domain: "ShinaraSDK", code: 400, userInfo: [NSLocalizedDescriptionKey: "API Key is not set"])
        }

        guard let referralCode = UserDefaults.standard.string(forKey: self.referralCodeKey) else {
            // If no referral code, we can still proceed without sending a purchase attribution.
            return
        }

        var processedTransactions = UserDefaults.standard.array(forKey: self.processedTransactionsKey) as? [String] ?? []
        if processedTransactions.contains(transactionId) {
            return // Skip if already processed
        }

        let headers: HTTPHeaders = [self.apiHeaderKey: apiKey, self.sdkPlatformHeaderKey: sdkPlatformHeaderValue]
        var parameters: [String: String] = [
            "product_id": productId,
            "transaction_id": transactionId,
            "code": referralCode,
            "platform": ""
        ]
        
        if let codeId = UserDefaults.standard.string(forKey: self.referralCodeIdKey) {
            parameters["affiliate_code_id"] = codeId
        }

        if let externalUserId = UserDefaults.standard.string(forKey: self.userExternalIdKey) {
            parameters["external_user_id"] = externalUserId
        }

        if let autoGenExternalUserId = UserDefaults.standard.string(forKey: self.autoGenUserExternalIdKey) {
            parameters["auto_generated_external_user_id"] = autoGenExternalUserId
        }

        let response = await AF.request(
            "\(self.baseURL)/iappurchase",
            method: .post,
            parameters: parameters,
            encoding: JSONEncoding.default,
            headers: headers
        ).serializingData().response

        guard let statusCode = response.response?.statusCode else {
            throw NSError(domain: "ShinaraSDK", code: -1, userInfo: [NSLocalizedDescriptionKey: "Unknown error occurred"])
        }

        if statusCode == 200 {
            processedTransactions.append(transactionId)
            UserDefaults.standard.set(processedTransactions, forKey: self.processedTransactionsKey)
        } else {
            throw NSError(domain: "ShinaraSDK", code: statusCode, userInfo: [NSLocalizedDescriptionKey: "Purchase attribution failed"])
        }
    }

    private func getTrackingSessionData(sessionId: String) async -> TrackingSessionData {
        // Move all UI-related calls to a separate MainActor function
        @MainActor
        func getDeviceInfo() -> TrackingSessionData {
            // Get Screen Resolution
            let bounds = UIScreen.main.bounds
            let scale = UIScreen.main.scale
            let width = bounds.size.width * scale
            let height = bounds.size.height * scale
            let screenResolution = "\(Int(width))x\(Int(height))"
                
            // Get User-Agent
            let version = UIDevice.current.systemVersion
            let userAgent = "iOS \(version)"
            
            // Get Device Model
            let deviceModel = UIDevice.current.model
                
            // Get OS & Version
            let osVersion = "\(UIDevice.current.systemName) \(UIDevice.current.systemVersion)"
                
            // Get Language
            let language = Locale.current.languageCode
                
            // Get Timezone
            let timezone = TimeZone.current.identifier
                
            return TrackingSessionData(
                sessionId: sessionId,
                userAgent: userAgent,
                deviceModel: deviceModel,
                osVersion: osVersion,
                screenResolution: screenResolution,
                timezone: timezone,
                language: language
            )
        }
        return await getDeviceInfo()
    }
}
